# Create DB secret based on existing secret value template
# (this will make sure that DB credential have the correct value)
# vars needed:
# - NAMESPACE
# - TEMPLATE_SECRET_NAME
# - SECRET_NAME
# - DB_NAME
# - SUFFIX
---
  - hosts: localhost
    gather_facts: no
    vars_files:
      - group_vars/all/vars.yml
    tasks:
    - name: Get secret from template
      shell: |
        oc -n {{ NAMESPACE }} get secret {{ TEMPLATE_SECRET_NAME }} -o json | jq '.data.app-db-name'
      register: app_db_name

    - name: Get secret from template
      shell: |
        oc -n {{ NAMESPACE }} get secret {{ TEMPLATE_SECRET_NAME }} -o json | jq '.data.app-db-password'
      register: app_db_password

    - name: Get secret from template
      shell: |
        oc -n {{ NAMESPACE }} get secret {{ TEMPLATE_SECRET_NAME }} -o json | jq '.data.app-db-username'
      register: app_db_username

    - name: Get secret from template
      shell: |
        oc -n {{ NAMESPACE }} get secret {{ TEMPLATE_SECRET_NAME }} -o json | jq '.data.replication-password'
      register: replication_password

    - name: Get secret from template
      shell: |
        oc -n {{ NAMESPACE }} get secret {{ TEMPLATE_SECRET_NAME }} -o json | jq '.data.replication-username'
      register: replication_username

    - name: Get secret from template
      shell: |
        oc -n {{ NAMESPACE }} get secret {{ TEMPLATE_SECRET_NAME }} -o json | jq '.data.superuser-password'
      register: superuser_password

    - name: Get secret from template
      shell: |
        oc -n {{ NAMESPACE }} get secret {{ TEMPLATE_SECRET_NAME }} -o json | jq '.data.superuser-username'
      register: superuser_username

    - name: Set cert decoded value
      set_fact:
        app_db_name_value: "{{ app_db_name.stdout | b64decode }}"
        app_db_password_value: "{{ app_db_password.stdout | b64decode }}"
        app_db_username_value: "{{ app_db_username.stdout | b64decode }}"
        replication_password_value: "{{ replication_password.stdout | b64decode }}"
        replication_username_value: "{{ replication_username.stdout | b64decode }}"
        superuser_password_value: "{{ superuser_password.stdout | b64decode }}"
        superuser_username_value: "{{ superuser_username.stdout | b64decode }}"

    - name: Create secret with value obtained from template
      command: >
        oc process -f ../templates/db-secrets.yaml \
        -p NAME={{ DB_NAME }} \
        -p SUFFIX={{ SUFFIX }} \
        -p APP_DB_NAME={{ app_db_name_value }} \
        -p APP_DB_PASSWORD={{ app_db_password_value }} \
        -p APP_DB_USERNAME={{ app_db_username_value }} \
        -p PATRONI_REPLICATION_PASSWORD={{ replication_password_value }} \
        -p PATRONI_REPLICATION_USERNAME={{ replication_username_value }} \
        -p PATRONI_SUPERUSER_PASSWORD={{ superuser_password_value }} \
        -p PATRONI_SUPERUSER_USERNAME={{ superuser_username_value }} \
        | oc apply -f -

# TODO: playbook for creating patroni statefulset
