---
- name: Checking if migrator image exists
  shell: oc get -n {{ migrator_vars.cluster_target.migrator.namespace }} imagestreamtag {{ migrator_vars.cluster_target.migrator.name }}:{{ migrator_vars.cluster_target.migrator.tag }} 
  register: imagestreamtag
  ignore_errors: yes 

- name: Building migrator image in {{ migrator_vars.cluster_target.migrator.namespace }}
  shell: |
    curl https://raw.githubusercontent.com/BCDevOps/StorageMigration/master/openshift/templates/pvc-migrator-build.yaml |
    oc process -f - -n {{ migrator_vars.cluster_target.migrator.namespace }} |
    oc apply -f - -n {{ migrator_vars.cluster_target.migrator.namespace }}
  when: imagestreamtag.stdout in 'NotFound'

- name: Deploying Migrator Image
  shell: |
    curl https://raw.githubusercontent.com/BCDevOps/StorageMigration/master/cross-cluster/target-migrator-tmpl.yaml |
    oc process -f - -n {{ migrator_vars.cluster_target.namespace }} \
    -p DESTINATION_PVC={{ migrator_vars.cluster_target.pvc }} \
    -p DST_IMAGE_NAME={{ migrator_vars.cluster_target.migrator.name }} \ 
    -p TAG_NAME={{ migrator_vars.cluster_target.migrator.tag }} \  
    -p DST_IMAGE_NAMESPACE={{ migrator_vars.cluster_target.migrator.namespace }} \  
    -p DST_IMAGE_REGISTRY={{ migrator_vars.cluster_target.image_registry }} \
    -p NAME={{ migrator_vars.cluster_target.migrator.name }}-{{ migrator_vars.cluster_target.name }} |
    oc apply -f - -n {{ migrator_vars.cluster_target.namespace }}

- name: Wait for migrator pod to be ready
  include_tasks: ../wait_for_scale_up.yml
  vars:
    TARGET_NAMESPACE: "{{ migrator_vars.cluster_target.namespace }}"
    COMPONENT_TYPE: Deployment
    COMPONENT_NAME: "{{ migrator_vars.cluster_target.migrator.name }}-{{ migrator_vars.cluster_target.name }}"
  
- name: Extract the Service Account token to pass to Source Cluster
  shell: |
    oc get secret -n {{ migrator_vars.cluster_target.namespace }} -o json | 
    jq '.items[] | select(.type == "kubernetes.io/service-account-token") | .metadata.name' |
    grep '{{ migrator_vars.cluster_target.migrator.name }}-{{ migrator_vars.cluster_target.name }}' |
    head -1 |
    awk '{print $1}'
  register: cluster_target_sa_token

- name: Create a temporary place to store token for Source Cluster
  ansible.builtin.tempfile:
    state: file
    suffix: "{{ migrator_vars.cluster_target.name }}-sa-secret"
  register: temp_sa_secret

- name: Setting Secret Name for use in Source Cluster
  set_fact:
    CLUSTER_TARGET_SA_SECRET_NAME: "{{ migrator_vars.cluster_target.name }}-sa-token"
- name: Get Token for use in secret Manifest
  shell: |
    oc -n {{ migrator_vars.cluster_target.namespace }} get secret {{ cluster_target_sa_token.stdout }} -o json  | 
    jq -r '.data.token' | 
    base64 -D
  register: token

- name: Create secret manifest
  shell: |
    oc -n {{ migrator_vars.cluster_target.namespace }} create secret generic {{ CLUSTER_TARGET_SA_SECRET_NAME }} --from-literal=token={{ token.stdout }} --dry-run -o json | jq -r '.metadata.namespace = "{{ migrator_vars.cluster_source.namespace  }}"' > {{ temp_sa_secret.path }}

- name: Setting fact for secret manifest path
  set_fact:
    CLUSTER_TARGET_SA_SECRET: "{{ temp_sa_secret.path }}"
